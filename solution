class Solution {
public:
    bool isSafe(int row,int col,vector<string> board,int n)
    {
        int newrow=row;
        int newcol=col;
        
        while(newrow>=0 and newcol>=0)
        {
            if(board[newrow][newcol] == 'Q')
                return false;
            newrow--;newcol--;
        }
        newrow=row;
        newcol=col;
        while(newcol>=0)
        {
            if(board[newrow][newcol] == 'Q')
                return false;
            newcol--;
        }
        newrow=row;
        newcol=col;
        while(newcol>=0 and newrow<n)
        {
            if(board[newrow][newcol] == 'Q')
                return false;
            newcol--;newrow++;
        }
        return true;
    }
    void solve(int col,vector<string> &board,vector<vector<string>> &ans,int n)
    {
        if(col == n)
        {
            ans.push_back(board);
            return;
        }
        for(int row =0;row<n;row++)
        {
            if(isSafe(row,col,board,n))
            {
                board[row][col]='Q';
                solve(col+1,board,ans,n);
                board[row][col]='.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n,'.');
        for(int i=0;i<n;i++)
            board[i]=s;
        solve(0,board,ans,n);
        return ans;
    }
};
